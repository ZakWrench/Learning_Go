Reference Website: https://milapneupane.com.np/2019/07/06/learning-golang-from-zero-to-hero/
Golang believes in fewer features, with only one right way to solve the problem.
This saves developers time and makes the large codebase easy to maintain. There are no "expressive" features like maps and filters in Golang.

Golang is made of packages. The package main tells the compiler that the program is compiled as an executable, rather than a shared library. It is the entry point for an application. 

Setting up Workspace:
A workspace in Go is defined by the environment variable `GOPATH`
Any code has to be written inside the workspace. Go will search for any packages inside the `GOPATH` directory, or the `GOROOT` dir, which is set by default when installing Go. `GOROOT` is the path where go is installed.
We can add the following line to `~/.bashrc`: export GOPATH=/home/zak/fundamentals_2

Go mods:
Go mods provide dependency management solution for go packages.
With go mod we do not need to declare the workspace by exporting the `GOPATH` env variable.
To initialize a project with go mod we can use the command:
go mod init github.com/helloworld
We can specify dependency with a require keyword:
"
module github.com/helloworld
go 1.12
require https://github.com/grpc/grpc-go // package for grpc

We can compile and then run our program using:
go build main.go
./main
or abstract the compilation with:
go run main.go
